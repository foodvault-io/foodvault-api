// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// TODO: 
// - Reviews 
// - Messaging
// - Notifications 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  firstName String 
  lastName String
  email String @unique
  hashedPassword String?
  image String?

  role RoleEnum @default(USER)
  
  sessions Session[]
  accounts Account[]
  kitchenRole KitchenUser?
  chefRole ChefUser?
}

enum RoleEnum {
  ADMIN @map("admin")
  USER @map("user")
  KITCHEN @map("kitchen")
  CHEF @map("chef")
}

enum UserStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  PENDING @map("pending")
  REJECTED @map("rejected")
  SUSPENDED @map("suspended")
}

model KitchenUser {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status UserStatus @default(PENDING)

  // Credit Info
  accountCredits Int @default(0)

  // Reviews on Chefs Portfolios
  chefReviews ChefReviews[]

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  kitchenDetails KitchenDetails[]
}

model ChefUser {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  status UserStatus @default(PENDING)

  // Chef Certificates & identification
  certificates Certificates[]

  // Credit Info
  accountCredits Int @default(0)
  purchaseDate DateTime?
  creditPackage BoughtCredits[]

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chefDetails ChefCompanyDetails[]
  payments Payment[]
}

model Account {
  id String @id @default(uuid())

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  providerType String @default("local")
  provider String @default("local")
  providerAccountId String 

  refreshToken String?
  accessToken String?
  accessTokenExpires Int?
  tokenType String?
  scope String?
  idToken String?
  sessionState String?

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid()) 
  sessionToken String @unique 
  expires DateTime

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String 
  token String @unique
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

// Kitchen Models: Kitchen Details, Kitchen Equipment, Kitchen Amenities, Kitchen Time Slots

enum KitchenStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  PENDING @map("pending")
  REJECTED @map("rejected")
  SUSPENDED @map("suspended")
}

model KitchenDetails {
  // Kitchen Details
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Kitchen Details
  name String @unique
  description String
  phone String
  website String?
  status KitchenStatus @default(PENDING) 

  // Time Slots
  timeSlots TimeSlot[]
  totalCreditsReceived Int @default(0) // Total Credits Received from Chefs for Bookings

  // Location Data
  address String

  cityId String
  city City @relation(fields: [cityId], references: [id])

  stateId String
  state State @relation(fields: [stateId], references: [id])

  countryId String
  country Country @relation(fields: [countryId], references: [id])

  zip String
  lat String?
  lon String?

  // Kitchen Certificates & identification
  certificates Certificates[]

  // Chefs Allowed in Kitchen
  chefsAllowed Int?

  // Kitchen Reviews
  kitchenReviews KitchenReviews[]
  
  // Kitchen Owner 
  ownerId String @unique
  kitchenOwner KitchenUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  equipmentList KitchenEquipment?
  additionalEquipment String?

  kitchenMedia Media[]
}

model KitchenEquipment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  amenities KitchenAmenities[]

  kitchenDetailsId String @unique
  kitchenDetails KitchenDetails @relation(fields: [kitchenDetailsId], references: [id], onDelete: Cascade)
}

model KitchenAmenities{
  id String @id @default(uuid())
  name String
  iconImage String?
  status String?
  required Boolean @default(false)

  kitchenEquipment KitchenEquipment[]
}

// Chef Models: Chef Details, Chef Time Slots, Chef Reviews
enum ChefStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
  PENDING @map("pending")
  REJECTED @map("rejected")
  SUSPENDED @map("suspended")
}

model ChefCompanyDetails {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  name String
  description String
  phone String
  website String?
  status ChefStatus @default(PENDING)

  // Time Slots Selected
  timeSlots TimeSlot[]

  // Location Data
  address String

  cityId String
  city City @relation(fields: [cityId], references: [id])

  stateId String
  state State @relation(fields: [stateId], references: [id])

  countryId String
  country Country @relation(fields: [countryId], references: [id])

  zip String
  lat String?
  lon String?

  // Chefs Allowed in Kitchen
  kitchensAllowed Int?

  // Chef Reviews
  chefReviews ChefReviews[]

  // Kitchen Reviews
  kitchenReviews KitchenReviews[]

  // Chef Owner 
  ownerId String 
  chefOwner ChefUser @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  chefMedia Media[]

  chefEquipment ChefEquipment?
}

model ChefEquipment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  amenities ChefAmenities[]

  chefCompanyId String @unique
  chefCompany ChefCompanyDetails @relation(fields: [chefCompanyId], references: [id], onDelete: Cascade)
}

model ChefAmenities{
  id String @id @default(uuid())
  name String
  iconImage String?
  status String?
  required Boolean @default(false)

  chefEquipment ChefEquipment[]
}


// Location Models: Cities, States, Countries
model City {
  id String @id @default(uuid())
  name String
  status String

  stateId String
  state State @relation(fields: [stateId], references: [id], onDelete: Cascade)

  kitchenDetails KitchenDetails[]
  chefDetails ChefCompanyDetails[]
}

model State {
  id String @id @default(uuid())
  name String
  code String
  status String

  city City[]

  countryId String
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  kitchenDetails KitchenDetails[]
  chefDetails ChefCompanyDetails[]
}

model Country {
  id String @id @default(uuid())
  name String
  code String
  status String

  state State[]

  kitchenDetails KitchenDetails[]
  chefDetails ChefCompanyDetails[]
}

// Review Models: Kitchen Reviews, Chef Reviews
model KitchenReviews {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  review String
  rating Int

  kitchenDetailsId String
  kitchenDetails KitchenDetails @relation(fields: [kitchenDetailsId], references: [id], onDelete: Cascade)

  chefId String
  chef ChefCompanyDetails @relation(fields: [chefId], references: [id], onDelete: Cascade)
}

model ChefReviews {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  review String
  rating Int

  chefDetailsId String
  chef ChefCompanyDetails @relation(fields: [chefDetailsId], references: [id], onDelete: Cascade)

  kitchenUserId String
  kitchenUser KitchenUser @relation(fields: [kitchenUserId], references: [id], onDelete: Cascade)
}


// Media Models: Certificates, Media, etc.
model Certificates {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  fileName String
  fileSize BigInt 
  fileUrl String
  fileType String

  kitchenDetailsId String?
  kitchenDetails KitchenDetails? @relation(fields: [kitchenDetailsId], references: [id], onDelete: Cascade)

  chefDetailsId String?
  chefDetails ChefUser? @relation(fields: [chefDetailsId], references: [id], onDelete: Cascade)
}

model Media {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  fileName String
  fileSize BigInt 
  fileUrl String
  fileType String

  kitchenDetailsId String?
  kitchenDetails KitchenDetails? @relation(fields: [kitchenDetailsId], references: [id], onDelete: Cascade)

  chefDetailsId String?
  chefDetails ChefCompanyDetails? @relation(fields: [chefDetailsId], references: [id], onDelete: Cascade)
}

// Booking Models: Booking, Booking Time Slots, Booking Payments, Booking Reviews

enum TimeSlotStatus {
  AVAILABLE @map("available")
  BOOKED @map("booked")
  PENDING @map("pending")
  CANCELLED @map("cancelled")
}

// Create model of a time slot
model TimeSlot {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Cost Details
  creditCost Int
  creditPaid Int?
  isPaid Boolean @default(false)
  isRefunded Boolean @default(false)
  refundReason String?
  refundDate DateTime?
  refundAmount Int?

  // Time Slot Details
  timeSlotDate DateTime
  startTime DateTime
  endTime DateTime
  timeSlotDuration Int
  timeSlotType String?
  timeSlotNotes String?
  timeSlotStatus TimeSlotStatus @default(AVAILABLE)

  timeZone String?
  canceledDate DateTime?
  rejectedDate DateTime?
  cancelationReasons String?
  rejectionReason String?

  // Chef Selecting Time Slot
  chefId String?
  chef ChefCompanyDetails? @relation(fields: [chefId], references: [id])

  chefsAttending Int


  // Time Slot Kitchen Details
  kitchenDetailsId String
  kitchenDetails KitchenDetails @relation(fields: [kitchenDetailsId], references: [id], onDelete: Cascade)
}

// Credits Model
enum CreditStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
}

model CreditPackages {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  name String
  description String
  creditsGranted Int
  pricePerCredit Decimal
  totalPrice Decimal
  status CreditStatus @default(ACTIVE)

  creditBought BoughtCredits[]
}

model BoughtCredits {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  creditsBought Int
  transactoinId String @default(uuid())

  // Credit Package Details
  creditPackageId String
  creditPackage CreditPackages @relation(fields: [creditPackageId], references: [id], onDelete: Cascade)

  // Chef Details
  chefId String
  chef ChefUser @relation(fields: [chefId], references: [id], onDelete: Cascade)

  // Payment Details
  paymentId String
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Payment {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Payment Details
  paymentId String
  paymentMethod String
  paymentStatus String
  paymentAmount Decimal
  paymentCurrency String
  paymentDate DateTime
  paymentNotes String?

  // Payment Details
  chefId String
  chef ChefUser @relation(fields: [chefId], references: [id], onDelete: Cascade)

  creditsBought BoughtCredits[]
}